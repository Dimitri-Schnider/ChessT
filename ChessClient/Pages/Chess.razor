@page "/chess"
@implements IAsyncDisposable
@using System.Text.Json
@using ChessNetwork
@using ChessNetwork.DTOs
@using ChessClient.Services
@using ChessLogic
@using ChessClient.Models
@using ChessClient.Pages.Components
@using ChessClient.Pages.Components.Cards
@using ChessClient.Configuration
@using ChessClient.Utils
@using ChessNetwork.Configuration
@using ChessClient.State

@if (UiState != null && UiState.IsCountdownVisible)
{
    <div class="game-start-countdown-overlay">
        <div class="countdown-content">
            @UiState.CountdownMessage
        </div>
    </div>
}

@if (GameCoreState != null && GameCoreState.CurrentPlayerInfo != null && GameCoreState.BoardDto != null)
{
    var gameCoreStateVerifiedForTimers = GameCoreState;
    <div class="timers-section-wrapper global-timers-mobile">
        <TimersDisplay WhiteTimeDisplay="@gameCoreStateVerifiedForTimers.WhiteTimeDisplay"
                       BlackTimeDisplay="@gameCoreStateVerifiedForTimers.BlackTimeDisplay"
                       CurrentTurnPlayer="@gameCoreStateVerifiedForTimers.CurrentTurnPlayer"
                       PlayerNames="@gameCoreStateVerifiedForTimers.PlayerNames"
                       EndGameMessage="@gameCoreStateVerifiedForTimers.EndGameMessage" />
    </div>
}

<div class="chess-page-container">

    <div class="chessboard-column">
        @* ... (InfoBoxen, EndGamePopup, ErrorMessage, Schachbrett-Container bleiben hier) ... *@
        @if (UiState != null)
        {
            <InfoBox Message="@(UiState.CurrentInfoMessageForBox ?? string.Empty)" 
                     AutoHide="@(!UiState.InfoBoxShowActionButton)" 
                     ShowActionButton="@UiState.InfoBoxShowActionButton"
                     ActionButtonText="@UiState.InfoBoxActionButtonText"
                     OnActionButtonClicked="@UiState.InfoBoxOnActionButtonClicked" />

            <InfoBox Message="@(UiState.IsConnecting ? "Verbinde mit SignalR Hub..." : string.Empty)" AutoHide="false" />
        }

        @if (GameCoreState != null)
        {
            <EndGamePopup Message="@GameCoreState.EndGameMessage" OnNewGameClicked="@StartNewGameFromEndGame" />
        }

        @if (UiState != null && !string.IsNullOrEmpty(UiState.ErrorMessage))
        {
            <div class="alert alert-danger mt-2 mx-auto" role="alert" style="max-width: 600px;">@UiState.ErrorMessage</div>
        }

        @if (GameCoreState != null && GameCoreState.CurrentPlayerInfo == null && string.IsNullOrWhiteSpace(GameCoreState.GameIdFromQueryString) && ModalState != null && !ModalState.ShowCreateGameModal && !ModalState.ShowJoinGameModal && !ModalState.ShowCardInfoPanelModal && !ModalState.ShowPieceSelectionModal)
        {
            <div class="alert alert-info mt-2 mx-auto" style="max-width: 600px;">
                Bitte erstelle ein neues Spiel oder tritt einem Spiel über das Menü (links)
                bei.
            </div>
        }
        else if (GameCoreState != null && GameCoreState.CurrentPlayerInfo == null && !string.IsNullOrWhiteSpace(GameCoreState.GameIdFromQueryString) && GameCoreState.IsGameIdFromQueryValidAndExists && ModalState != null && !ModalState.ShowJoinGameModal && !ModalState.ShowCardInfoPanelModal && !ModalState.ShowPieceSelectionModal)
        {
            <div class="alert alert-success mt-2 mx-auto" style="max-width: 600px;">
                Spiel-ID <strong>@(ModalState.GameIdInputForJoinModal)</strong> aus Link geladen.
                Bitte gib deinen Namen ein und klicke auf "Beitreten" im Join-Game Modal.
            </div>
        }
        <div class="chessboard-container">
            @if (GameCoreState != null && GameCoreState.BoardDto != null && GameCoreState.CurrentPlayerInfo != null && CardState != null && HighlightState != null)
            {
                var gameCoreStateVerifiedForBoard = GameCoreState;
                <ChessBoard GameId="@gameCoreStateVerifiedForBoard.GameId"
                            Board="@gameCoreStateVerifiedForBoard.BoardDto"
                            OnMove="@HandlePlayerMove"
                            OnSquareClickForCard="@HandleSquareClickForCardTargetSelection"
                            IsSquareSelectionModeActiveForCard="@IsBoardInCardSelectionMode()"
                            PlayerColorForCardPieceSelection="@GetPlayerColorForCardPieceSelection()"
                            FirstSelectedSquareForCard="@GetFirstSelectedSquareForCardEffect()"
                            FlipBoard="@(gameCoreStateVerifiedForBoard.MyColor == Player.Black)"
                            PlayerId="@gameCoreStateVerifiedForBoard.CurrentPlayerInfo.Id"
                            MyPlayerColor="@gameCoreStateVerifiedForBoard.MyColor"
                            IsEnabled="@(IsChessboardEnabled())"
                            HighlightedCardTargetSquaresForSelection="@HighlightState.CardTargetSquaresForSelection" />
            }
        </div>
    </div>

    @if (GameCoreState != null && GameCoreState.CurrentPlayerInfo != null && GameCoreState.BoardDto != null && CardState != null && ModalState != null)
    {
        <div class="game-side-panel">
            <div class="timers-desktop-only">
                <TimersDisplay WhiteTimeDisplay="@GameCoreState.WhiteTimeDisplay"
                               BlackTimeDisplay="@GameCoreState.BlackTimeDisplay"
                               CurrentTurnPlayer="@GameCoreState.CurrentTurnPlayer"
                               PlayerNames="@GameCoreState.PlayerNames"
                               EndGameMessage="@GameCoreState.EndGameMessage" />
            </div>

            @* Wrapper für die gespielten Karten, um internes Scrollen zu ermöglichen.
               Die Sichtbarkeit auf Mobile wird über eine CSS-Klasse und _showMobilePlayedCardsHistory gesteuert *@
            <div class="played-cards-history-display-wrapper @(!_showMobilePlayedCardsHistory ? "hidden-on-mobile" : "")">
                <PlayedCardsHistoryDisplay MyPlayedCards="@CardState.MyPlayedCardsForHistory"
                                           OpponentPlayedCards="@CardState.OpponentPlayedCardsForHistory"
                                           OnPlayedCardSelected="@HandlePlayedCardSelectedForInfoPanel" />
            </div>

            <div class="bottom-game-elements">
                <HandCardsDisplay PlayerHand="@CardState.PlayerHandCards"
                                  IsSelectionDisabled="@(CardState.IsCardActivationPending || ModalState.ShowCardInfoPanelModal || ModalState.ShowPieceSelectionModal)" />
                <div @onclick="ToggleMobilePlayedCardsHistory" class="draw-pile-toggle-history-mobile">
                    <DrawPilesDisplay MyDrawPileCount="@CardState.MyDrawPileCount" />
                </div>
            </div>
        </div>
    }
</div>

@if (AnimationState != null)
{
    <CardActivationAnimation IsVisible="AnimationState.IsCardActivationAnimating"
                             CardToDisplay="AnimationState.CardForAnimation"
                             IsOwnCardAnimation="AnimationState.IsOwnCardForAnimation"
                             OnAnimationFinished="HandleClientAnimationFinished" />

    <CardSwapSpecificAnimation IsVisible="AnimationState.IsCardSwapAnimating"
                               CardGiven="AnimationState.CardGivenForSwap"
                               CardReceived="AnimationState.CardReceivedForSwap"
                               OnSwapAnimationFinished="HandleSpecificCardSwapAnimationFinished" />
}

@if (ModalState != null)
{
    @if (CardState != null)
    {
        <CardInfoPanel IsVisible="ModalState.ShowCardInfoPanelModal"
                       CardToDisplay="ModalState.CardForInfoPanelModal"
                       IsActivatable="ModalState.IsCardInInfoPanelModalActivatable"
                       IsPreviewOnly="ModalState.IsCardInInfoPanelModalPreviewOnly"
                       OnActivateCard="HandleActivateCardFromModal"
                       OnCancelCardSelectionOrCloseModal="HandleCloseCardInfoModal" />
    }

    <CreateGameModal IsVisible="ModalState.ShowCreateGameModal"
                     OnClose="@CloseCreateGameModal"
                     OnCreateGame="@SubmitCreateGame" />

    <JoinGameModal IsVisible="ModalState.ShowJoinGameModal"
                   OnClose="@CloseJoinGameModal"
                   OnJoinGame="@SubmitJoinGame"
                   InitialGameId="@ModalState.GameIdInputForJoinModal" />

    <InviteLinkModal IsVisible="ModalState.ShowInviteLinkModal"
                     InviteLink="@InviteLink"
                     OnClose="@ModalState.CloseInviteLinkModal" />

    <PieceSelectionModal IsVisible="@ModalState.ShowPieceSelectionModal"
                         Title="@ModalState.PieceSelectionModalTitle"
                         PromptMessage="@ModalState.PieceSelectionModalPrompt"
                         Choices="@(ModalState.PieceSelectionModalChoices ?? new List<PieceSelectionChoiceInfo>())"
                         PlayerColor="@ModalState.PieceSelectionModalPlayerColor"
                         ShowCancelButton="@ModalState.PieceSelectionModalShowCancelButton"
                         OnPieceSelected="@HandlePieceTypeSelectedFromModal"
                         OnCancelled="@HandlePieceSelectionModalCancelled" />
}