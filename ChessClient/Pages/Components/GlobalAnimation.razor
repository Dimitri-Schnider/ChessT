@using ChessClient.State
@implements IDisposable

@inject IUiState UiState

@if (UiState.ShowWinAnimation)
{
    <div class="global-animation-overlay">
        @for (int i = 0; i < 150; i++)
        {
            <div class="confetti" style="@GetConfettiStyle(i)"></div>
        }
    </div>
}

@if (UiState.ShowLossAnimation)
{
    <div class="global-animation-overlay loss-overlay">
    </div>
}

@code {
    private readonly Random _random = new();

    protected override void OnInitialized()
    {
        UiState.StateChanged += OnUiStateChanged;
    }

    private void OnUiStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private string GetConfettiStyle(int index)
    {
        double startX = _random.NextDouble() * 100;
        double delay = _random.NextDouble() * 5;
        double duration = 3 + _random.NextDouble() * 2.5;
        double rotation = _random.Next(-360, 360);
        string color = $"hsl({_random.Next(0, 360)}, 90%, 65%)";

        return $"--start-x: {startX}vw; " +
               $"--delay: {delay}s; " +
               $"--duration: {duration}s; " +
               $"--rotation: {rotation}deg; " +
               $"--color: {color};";
    }

    public void Dispose()
    {
        UiState.StateChanged -= OnUiStateChanged;
    }
}