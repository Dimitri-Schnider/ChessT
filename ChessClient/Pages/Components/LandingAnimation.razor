@using System.Threading.Tasks
@inject IJSRuntime JSRuntime

@* Diese Komponente realisiert die Startanimation der Anwendung. *@
@* Sie wird einmal beim Laden der Seite angezeigt und benachrichtigt die App.razor, wenn sie abgeschlossen ist. *@
@if (IsVisible)
{
    @* Das Overlay, das den gesamten Bildschirm einnimmt. Die 'fade-out'-Klasse steuert das abschliessende Ausblenden. *@
    <div class="landing-overlay @(isFadingOut ? "fade-out" : "")">
        <div class="animation-canvas">

            @* Container für die Karten. Die CSS-Klasse für die Animationsschritte wird dynamisch vom Code gesetzt. *@
            <div class="cards-container @animationStepClass">
                <div class="card-wrapper card-1">
                    <img src="img/cards/templateback.png" alt="Kartenrücken 1" />
                </div>
                <div class="card-wrapper card-2">
                    <img src="img/cards/templateback.png" alt="Kartenrücken 2" />
                </div>
                <div class="card-wrapper card-3">
                    <img src="img/cards/templateback.png" alt="Kartenrücken 3" />
                </div>
            </div>

            @* Container für den Text. Die 'visible'-Klasse löst die Einblend-Animation des Textes aus. *@
            <div class="text-container @(showText ? "visible" : "")">
                <div class="title-text">SchachT</div>
                <div class="subtitle-text">Schach mit Twist</div>
            </div>

        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; } = true;             // Steuert die generelle Sichtbarkeit der Komponente von aussen.
    [Parameter] public EventCallback OnAnimationFinished { get; set; }  // Event-Callback, der aufgerufen wird, wenn die gesamte Animation abgeschlossen ist.

    private string animationStepClass = ""; // Speichert die aktuelle CSS-Klasse für die Karten-Animationsphase.
    private bool showText = false;          // Steuert die Sichtbarkeit des Titels und Untertitels.
    private bool isFadingOut = false;       // Steuert die finale Ausblend-Animation des gesamten Overlays.

    // Lifecycle-Methode, die nach dem ersten Rendern der Komponente aufgerufen wird, um die Animation zu starten.
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && IsVisible)
        {
            // Schritt 1: Karten fliegen von unten ins Bild.
            animationStepClass = "step-1-fly-in";
            StateHasChanged(); // UI-Update anstossen, um die Animation zu starten.

            // Wartezeit, bis die Karten ihre zentrale Position erreicht haben.
            await Task.Delay(1200);

            // Schritt 2: Karten fächern sich auf.
            animationStepClass = "step-2-fan-out";
            StateHasChanged();

            // Schritt 3: Nachdem die Karten aufgefächert sind, wird der Text eingeblendet.
            await Task.Delay(500);
            showText = true;
            StateHasChanged();

            // Schritt 4: Gesamtdauer, die die Animation sichtbar bleibt.
            await Task.Delay(2500);
            isFadingOut = true; // Löst die Ausblend-Animation aus.
            StateHasChanged();

            // Schritt 5: Wartezeit, bis die Ausblend-Animation abgeschlossen ist.
            await Task.Delay(500);

            // Benachrichtigt die übergeordnete Komponente (App.razor), dass die Animation beendet ist.
            if (OnAnimationFinished.HasDelegate)
            {
                await OnAnimationFinished.InvokeAsync();
            }
        }
    }
}