@using Microsoft.JSInterop
@inject IJSRuntime JSRuntime

@* Diese Komponente stellt den Modal-Dialog dar, der nach der Erstellung eines Spiels angezeigt wird. *@
@* Er stellt dem Benutzer den Link zur Verfügung, den er an seinen Gegner senden kann. *@

@if (IsVisible)
{
    @* Die halbtransparente Hintergrund-Überlagerung. *@
    <div class="modal-backdrop show" @onclick="CloseModal"></div>

    @* Der Hauptcontainer des Modals. *@
    <div class="modal show" tabindex="-1" style="display: block;" role="dialog">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Gegner einladen</h5>
                    <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p>Dein Spiel wurde erstellt! Teile diesen Link mit deinem Gegner, damit er beitreten kann:</p>

                    <div class="input-group mt-1 mb-3">
                        @* Das 'readonly' Attribut verhindert, dass der Benutzer den Link im Textfeld bearbeitet. *@
                        @* Die ID 'inviteLinkInput' wird von JavaScript verwendet, um das Element zu finden. *@
                        <input id="inviteLinkInput" type="text" class="form-control" value="@InviteLink" readonly @ref="inviteLinkInputRef" />
                        <button class="btn btn-primary" type="button" @onclick="CopyToClipboard">
                            <i class="bi bi-clipboard me-1"></i> Link kopieren
                        </button>
                    </div>

                    @* Zeigt eine temporäre Nachricht an, nachdem der Benutzer versucht hat, den Link zu kopieren. *@
                    @if (!string.IsNullOrEmpty(CopyMessage))
                    {
                        <div class="alert alert-success alert-sm py-1 px-2 mt-2" role="alert" style="font-size: 0.85em;">
                            @CopyMessage
                        </div>
                    }
                    <p class="mt-3 mb-0"><small>Das Spiel beginnt, sobald dein Gegner beigetreten ist.</small></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseModal">Schliessen</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public bool IsVisible { get; set; }             // Steuert die Sichtbarkeit des Modals.
    [Parameter] public string InviteLink { get; set; } = "";    // Empfängt den zu teilenden Einladungslink.
    [Parameter] public EventCallback OnClose { get; set; }      // Callback, der beim Schliessen des Modals ausgelöst wird.

    private string CopyMessage = "";                            // Speichert die Nachricht, die nach dem Kopierversuch angezeigt wird ("Link kopiert!" oder Fehler).
    private ElementReference inviteLinkInputRef;                // Eine Referenz auf das <input>-Element im DOM.

    // Schliesst das Modal und setzt die Kopiervorgang-Nachricht zurück.
    private async Task CloseModal()
    {
        CopyMessage = "";
        await OnClose.InvokeAsync();
    }

    // Kopiert den Einladungslink in die Zwischenablage des Benutzers mittels JavaScript-Interop.
    private async Task CopyToClipboard()
    {
        if (!string.IsNullOrEmpty(InviteLink))
        {
            try
            {
                // Wählt den Text im Eingabefeld über seine ID aus. Dies gibt dem Benutzer visuelles Feedback.
                await JSRuntime.InvokeVoidAsync("eval", $"document.getElementById('inviteLinkInput').select()");
                // Ruft die JavaScript-Funktion 'clipboardCopy.copyText' auf (definiert in CopyToClipboard.js), um den Text zu kopieren.
                await JSRuntime.InvokeVoidAsync("clipboardCopy.copyText", InviteLink);
                CopyMessage = "Link in die Zwischenablage kopiert!";

                // Startet eine verzögerte Aufgabe, die die Erfolgsmeldung nach 3 Sekunden wieder ausblendet.
                _ = Task.Delay(3000).ContinueWith(async _ =>
                {
                    CopyMessage = "";
                    await InvokeAsync(StateHasChanged);
                });
            }
            catch
            {
                CopyMessage = "Fehler beim Kopieren.";
            }
            StateHasChanged();
        }
    }

    // Lifecycle-Methode: Wird aufgerufen, wenn die Parameter der Komponente gesetzt werden.
    protected override void OnParametersSet()
    {
        // Stellt sicher, dass die Kopiervorgang-Nachricht zurückgesetzt wird, wenn das Modal ausgeblendet wird.
        if (!IsVisible)
        {
            CopyMessage = "";
        }
    }
}